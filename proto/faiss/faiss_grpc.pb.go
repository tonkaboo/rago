// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: faiss.proto

package faiss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaissServiceClient is the client API for FaissService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaissServiceClient interface {
	// FindSimilarChunks handles the request for finding similar chunks based on a given embedding vector.
	FindSimilarChunks(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityReply, error)
}

type faissServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaissServiceClient(cc grpc.ClientConnInterface) FaissServiceClient {
	return &faissServiceClient{cc}
}

func (c *faissServiceClient) FindSimilarChunks(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityReply, error) {
	out := new(SimilarityReply)
	err := c.cc.Invoke(ctx, "/faiss.FaissService/FindSimilarChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaissServiceServer is the server API for FaissService service.
// All implementations must embed UnimplementedFaissServiceServer
// for forward compatibility
type FaissServiceServer interface {
	// FindSimilarChunks handles the request for finding similar chunks based on a given embedding vector.
	FindSimilarChunks(context.Context, *SimilarityRequest) (*SimilarityReply, error)
	mustEmbedUnimplementedFaissServiceServer()
}

// UnimplementedFaissServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFaissServiceServer struct {
}

func (UnimplementedFaissServiceServer) FindSimilarChunks(context.Context, *SimilarityRequest) (*SimilarityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSimilarChunks not implemented")
}
func (UnimplementedFaissServiceServer) mustEmbedUnimplementedFaissServiceServer() {}

// UnsafeFaissServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaissServiceServer will
// result in compilation errors.
type UnsafeFaissServiceServer interface {
	mustEmbedUnimplementedFaissServiceServer()
}

func RegisterFaissServiceServer(s grpc.ServiceRegistrar, srv FaissServiceServer) {
	s.RegisterService(&FaissService_ServiceDesc, srv)
}

func _FaissService_FindSimilarChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaissServiceServer).FindSimilarChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faiss.FaissService/FindSimilarChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaissServiceServer).FindSimilarChunks(ctx, req.(*SimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaissService_ServiceDesc is the grpc.ServiceDesc for FaissService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaissService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faiss.FaissService",
	HandlerType: (*FaissServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSimilarChunks",
			Handler:    _FaissService_FindSimilarChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faiss.proto",
}
